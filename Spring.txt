
Assert.notEmpty(user, "사용자 정보가 없습니다.");
Assert.isTrue(user.getId() > 0);
Assert.isTrue(user.getId() > 0, "사용자 정보가 존재하지 않습니다.", UserNotFoundException.class);

@RestController는 @Controller + @ResponseBody
@Data 어노테이션은 @Getter, @Setter, @RequiredArgsConstructor, @ToString, @EqualsAndHashCode를 한꺼번에 설정해준다
DTO(Data Transfer Object)의 핵심 관심사는 이름 그대로 데이터의 전달
Entity는 핵심 비지니스 로직을 담는 비지니스 도메인의 영역의 일부
@NoArgsConstructor 어노테이션은 파라미터가 없는 기본 생성자를 생성해주고
@AllArgsConstructor 어노테이션은 모든 필드 값을 파라미터로 받는 생성자를 만들어줍니다
@RequiredArgsConstructor 어노테이션은 final이나 @NonNull인 필드 값만 파라미터로 받는 생성자를 만들어줍니다.

build.gradle
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'

application.properties
	spring.jpa.hibernate.ddl-auto=update
	spring.datasource.driverClassName=org.mariadb.jdbc.Driver
	spring.datasource.url=jdbc:mariadb://localhost:3306/castproserver
	spring.datasource.username=root 
	spring.datasource.password=root

insert : save(entity 객체)
select : findById(키 타입), getOne(키 타입)
update : save(entity 객체)
delete : deleteById(키 타입), delete(엔티티 객체)

