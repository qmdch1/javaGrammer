@Aspect
	AOP를 사용할 때 작성하며, 로직을 기준으로 관점마다 각각 모듈화 하는 어노테이션
	
	@Around
		지정한 패턴에 해당하는 메소드가 실행 전, 후 모두에서 동작한다. return Object
	@Before
		해당 패턴이 실행되기 전에 동작한다. return void
	@After
		해당 패턴이 실행된 후에 동작한다. return void
	

@SpringBootApplication
	SpringBoot를 실행 시켜주는 어노테이션

@Component
	@Controller
	@Service
	@Repository
	위 3개의 어노테이션에는 컴포넌트가 내장되어 있으며,
	SpringBoot 에서는 Component full scan을 이용하여 검색된 Component를 Bean으로 자동으로 등록 해준다.
	
@Transactional
	Service
		이 어노테이션이 붙을때 SpringBoot에서는 영속성 컨텍스트를 만들며 메서드가 종료되어 Transaction AOP가 커밋할 경우
		영속성 컨텍스트가 flush 되면서 해당 내용이 반영된다.
		
	Test
		테스트에서 DB를 사용할때를 예로 들면 Test에서 사용한 DB 데이터들을 다시 되돌리기 힘들기 때문에 처음 Transaction이 접속한 상태로 RollBack 해준다.
		하지만 테스트에서 실제 값을 넣으려면 @Commit 어노테이션을 사용하면 영구적으로 커밋된다.
	
@Autowierd
	DI(Dependency Injection) 의존성 주입이라는 개념으로 Controller -> Service -> Repository에 의존하며, 주로 생성자에서 주로 사용한다.
	생성자에서 DI를 할경우 스프링 빈에 해당 데이터가 있는지 검색해서 자동으로 연결해준다.

@Configuration
	Autowierd를 사용하지 않고 수동으로 빈을 생성해서 사용할 때 사용한다.
	
@Bean
	클래스가 아닌 외부의 라이브러리 등에서 메서드에서 수동으로 빈을 생성할때 사용한다.

@GetMapping
	Get데이터 받을 때 사용
@PostMapping
	Post데이터 받을 때 사용